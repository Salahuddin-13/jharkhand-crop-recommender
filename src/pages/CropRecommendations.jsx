import React, { useState, useEffect, useMemo } from 'react';
import axios from 'axios';
import { Leaf, MapPin, Droplets, Sun, Calendar, Wheat, BarChart, Info, Wind, Thermometer, TrendingUp, Shield, RefreshCcw, ChevronsRight, Zap, Eye, TestTube2, AlertTriangle, X, Sprout, Combine, Bug } from 'lucide-react';

// --- V3.3: ALL DATA AND COMPONENTS CONSOLIDATED WITH FIX ---

// --- DATASET ---
const DISTRICTS = ["Amritsar", "Barnala", "Bathinda", "Faridkot", "Fatehgarh Sahib", "Fazilka", "Ferozepur", "Gurdaspur", "Hoshiarpur", "Jalandhar", "Kapurthala", "Ludhiana", "Mansa", "Moga", "Sri Muktsar Sahib", "Pathankot", "Patiala", "Rupnagar", "Sahibzada Ajit Singh Nagar", "Sangrur", "Shahid Bhagat Singh Nagar", "Tarn Taran"];
const SOIL_TYPES = ["Alluvial", "Loamy", "Sandy", "Clayey", "Saline", "Red Soil"];
const CROPS = [
    // Grains & Cereals
    { id: "wheat", name: "Wheat", icon: "üåæ", soil: ["Alluvial", "Loamy"], water: "medium", seasons: ["Rabi"], growingDuration: 5, investment: 35000, avgYield: 20, marketPrice: "‚Çπ2125/quintal", type: "Grain", varieties: ["HD-3086", "PBW-550"], marketDemand: "High", riskFactor: "Low", cropFamily: "Poaceae", waterEfficiency: "Medium", commonRisks: ["Yellow Rust", "Aphids"], plantingMonths: [10, 11], harvestMonths: [3, 4], soilPH: [6.0, 7.5], interCropping: ["Mustard", "Chickpea"], specialNotes: "Core crop of the Rabi season, benefits from crop rotation with legumes." },
    { id: "paddy", name: "Rice (Paddy)", icon: "üçö", soil: ["Clayey", "Loamy"], water: "high", seasons: ["Kharif"], growingDuration: 4, investment: 45000, avgYield: 28, marketPrice: "‚Çπ2060/quintal", type: "Grain", varieties: ["Pusa-1121", "PR-126"], marketDemand: "High", riskFactor: "Medium", cropFamily: "Poaceae", waterEfficiency: "Low", commonRisks: ["Blast", "Bacterial Blight"], plantingMonths: [6, 7], harvestMonths: [10, 11], soilPH: [5.5, 7.0], interCropping: ["Fish (in flooded paddies)"], specialNotes: "Very water-intensive; consider Direct Seeded Rice (DSR) to conserve water." },
    { id: "maize", name: "Maize", icon: "üåΩ", soil: ["Loamy", "Sandy"], water: "medium", seasons: ["Kharif", "Rabi"], growingDuration: 3, investment: 25000, avgYield: 25, marketPrice: "‚Çπ1975/quintal", type: "Grain", varieties: ["Pioneer 3396", "Dekalb 900M"], marketDemand: "High", riskFactor: "Medium", cropFamily: "Poaceae", waterEfficiency: "High", commonRisks: ["Fall Armyworm", "Stalk Rot"], plantingMonths: [6, 7, 10], harvestMonths: [9, 10, 1], soilPH: [5.8, 7.2], interCropping: ["Soybean", "Cowpea"], specialNotes: "Versatile crop for both grain and fodder purposes." },
    { id: "basmati_rice", name: "Basmati Rice", icon: "üåæ", soil: ["Loamy", "Clayey"], water: "high", seasons: ["Kharif"], growingDuration: 5, investment: 55000, avgYield: 22, marketPrice: "‚Çπ3500/quintal", type: "Grain", varieties: ["Pusa Basmati 1509", "Pusa Basmati 1121"], marketDemand: "High", riskFactor: "Medium", cropFamily: "Poaceae", waterEfficiency: "Low", commonRisks: ["Neck Blast", "Sheath Blight"], plantingMonths: [7], harvestMonths: [11, 12], soilPH: [5.5, 7.0], interCropping: [], specialNotes: "High-value crop, requires careful water and nutrient management." },
    { id: "pearl_millet", name: "Pearl Millet (Bajra)", icon: "üåæ", soil: ["Sandy", "Loamy"], water: "low", seasons: ["Kharif"], growingDuration: 3, investment: 12000, avgYield: 12, marketPrice: "‚Çπ2350/quintal", type: "Grain", varieties: ["PHB-2168", "PCB-164"], marketDemand: "Low", riskFactor: "Low", cropFamily: "Poaceae", waterEfficiency: "Very High", commonRisks: ["Downy Mildew", "Smut"], plantingMonths: [7], harvestMonths: [10], soilPH: [6.0, 8.0], interCropping: ["Moong Bean", "Guar"], specialNotes: "Excellent for arid regions with low rainfall; highly drought-resistant." },
    { id: "barley", name: "Barley", icon: "üå±", soil: ["Sandy", "Saline", "Loamy"], water: "low", seasons: ["Rabi"], growingDuration: 4, investment: 16000, avgYield: 15, marketPrice: "‚Çπ2000/quintal", type: "Grain", varieties: ["DWRB 137", "BH 946"], marketDemand: "Medium", riskFactor: "Low", cropFamily: "Poaceae", waterEfficiency: "High", commonRisks: ["Covered Smut", "Stripe Rust"], plantingMonths: [10, 11], harvestMonths: [3, 4], soilPH: [6.5, 8.5], interCropping: ["Lentil", "Mustard"], specialNotes: "Tolerant to saline soils, making it a good choice for problematic land." },
    
    // Cash & Fiber Crops
    { id: "sugarcane", name: "Sugarcane", icon: "üéã", soil: ["Loamy", "Clayey"], water: "high", seasons: ["Annual"], growingDuration: 12, investment: 60000, avgYield: 350, marketPrice: "‚Çπ360/quintal", type: "Cash Crop", varieties: ["Co-0238", "CoJ-85"], marketDemand: "High", riskFactor: "Medium", cropFamily: "Poaceae", waterEfficiency: "Low", commonRisks: ["Red Rot", "Borers"], plantingMonths: [2, 3], harvestMonths: [12, 1, 2], soilPH: [6.5, 7.5], interCropping: ["Onion", "Coriander"], specialNotes: "Long duration crop requiring significant investment and water." },
    { id: "cotton", name: "Cotton", icon: "‚òÅÔ∏è", soil: ["Alluvial", "Loamy", "Saline"], water: "medium", seasons: ["Kharif"], growingDuration: 6, investment: 40000, avgYield: 8, marketPrice: "‚Çπ6080/quintal", type: "Fiber", varieties: ["Bt Cotton", "NCS-145"], marketDemand: "High", riskFactor: "High", cropFamily: "Malvaceae", waterEfficiency: "Medium", commonRisks: ["Pink Bollworm", "Whitefly"], plantingMonths: [4, 5], harvestMonths: [10, 11, 12], soilPH: [6.0, 8.0], interCropping: ["Groundnut", "Moong Bean"], specialNotes: "Highly susceptible to pests; requires integrated pest management." },

    // Oilseeds & Pulses
    { id: "mustard", name: "Mustard", icon: "üåº", soil: ["Loamy", "Sandy"], water: "low", seasons: ["Rabi"], growingDuration: 4, investment: 18000, avgYield: 10, marketPrice: "‚Çπ5450/quintal", type: "Oilseed", varieties: ["Pusa Bold", "GSC-7"], marketDemand: "Medium", riskFactor: "Low", cropFamily: "Brassicaceae", waterEfficiency: "High", commonRisks: ["Alternaria Blight", "Aphids"], plantingMonths: [10], harvestMonths: [2, 3], soilPH: [6.0, 7.5], interCropping: ["Wheat", "Barley"], specialNotes: "Important oilseed crop for the Rabi season; low water requirement." },
    { id: "sunflower", name: "Sunflower", icon: "üåª", soil: ["Sandy", "Loamy"], water: "low", seasons: ["Rabi", "Zaid"], growingDuration: 3, investment: 22000, avgYield: 9, marketPrice: "‚Çπ6400/quintal", type: "Oilseed", varieties: ["PSH-1962", "DK-3849"], marketDemand: "Medium", riskFactor: "Medium", cropFamily: "Asteraceae", waterEfficiency: "High", commonRisks: ["Powdery Mildew", "Head Borer"], plantingMonths: [1, 2, 10], harvestMonths: [4, 5, 1], soilPH: [6.0, 7.5], interCropping: [], specialNotes: "Photo-insensitive, allowing for flexible planting schedules." },
    { id: "gram", name: "Gram (Chickpea)", icon: "üå±", soil: ["Sandy", "Loamy"], water: "low", seasons: ["Rabi"], growingDuration: 4, investment: 15000, avgYield: 8, marketPrice: "‚Çπ4875/quintal", type: "Pulse", varieties: ["PBG 7", "GNG 1581"], marketDemand: "Medium", riskFactor: "Low", cropFamily: "Fabaceae", waterEfficiency: "High", commonRisks: ["Wilt", "Pod Borer"], plantingMonths: [10], harvestMonths: [3], soilPH: [6.0, 8.0], interCropping: ["Wheat", "Barley"], specialNotes: "Excellent for nitrogen fixation, improving soil health for the next crop." },
    { id: "moong_bean", name: "Moong Bean", icon: "üåø", soil: ["Sandy", "Loamy"], water: "low", seasons: ["Kharif", "Zaid"], growingDuration: 2, investment: 14000, avgYield: 5, marketPrice: "‚Çπ7755/quintal", type: "Pulse", varieties: ["SML 668", "IPM 2-14"], marketDemand: "High", riskFactor: "Medium", cropFamily: "Fabaceae", waterEfficiency: "Very High", commonRisks: ["Yellow Mosaic Virus", "Thrips"], plantingMonths: [3, 7], harvestMonths: [5, 9], soilPH: [6.5, 8.5], interCropping: ["Cotton", "Maize"], specialNotes: "Short duration crop, perfect for filling the gap between main seasons." },
    { id: "lentil", name: "Lentil (Masur)", icon: "üåø", soil: ["Loamy", "Clayey"], water: "low", seasons: ["Rabi"], growingDuration: 4, investment: 13000, avgYield: 6, marketPrice: "‚Çπ6000/quintal", type: "Pulse", varieties: ["WBL 77", "IPL 316"], marketDemand: "Medium", riskFactor: "Low", cropFamily: "Fabaceae", waterEfficiency: "High", commonRisks: ["Rust", "Wilt"], plantingMonths: [10, 11], harvestMonths: [2, 3], soilPH: [6.0, 8.0], interCropping: ["Barley"], specialNotes: "Improves soil fertility through nitrogen fixation." },
    
    // Vegetables
    { id: "potato", name: "Potatoes", icon: "ü•î", soil: ["Alluvial", "Loamy", "Sandy"], water: "medium", seasons: ["Rabi"], growingDuration: 3, investment: 50000, avgYield: 120, marketPrice: "‚Çπ800/quintal", type: "Vegetable", varieties: ["Kufri Jyoti", "Kufri Pukhraj"], marketDemand: "High", riskFactor: "Medium", cropFamily: "Solanaceae", waterEfficiency: "Medium", commonRisks: ["Late Blight", "Potato Scab"], plantingMonths: [10], harvestMonths: [1, 2], soilPH: [5.5, 6.5], interCropping: ["Garlic", "Onion"], specialNotes: "High investment but potentially high returns; seed quality is crucial." },
    { id: "onion", name: "Onion", icon: "üßÖ", soil: ["Loamy", "Sandy"], water: "medium", seasons: ["Kharif", "Rabi"], growingDuration: 4, investment: 30000, avgYield: 100, marketPrice: "‚Çπ1200/quintal", type: "Vegetable", varieties: ["PRO-6", "Punjab Naroya"], marketDemand: "High", riskFactor: "High", cropFamily: "Amaryllidaceae", waterEfficiency: "Medium", commonRisks: ["Thrips", "Purple Blotch"], plantingMonths: [7, 10], harvestMonths: [10, 3], soilPH: [6.0, 7.0], interCropping: ["Sugarcane", "Turmeric"], specialNotes: "Price can be volatile; good storage facilities can maximize profit." },
    { id: "tomato", name: "Tomato", icon: "üçÖ", soil: ["Loamy", "Sandy", "Red Soil"], water: "medium", seasons: ["Kharif", "Rabi"], growingDuration: 3, investment: 28000, avgYield: 250, marketPrice: "‚Çπ1000/quintal", type: "Vegetable", varieties: ["Punjab Ratta", "TH-1"], marketDemand: "High", riskFactor: "High", cropFamily: "Solanaceae", waterEfficiency: "Medium", commonRisks: ["Early Blight", "Fruit Borer"], plantingMonths: [7, 11], harvestMonths: [10, 2], soilPH: [6.0, 7.0], interCropping: ["Marigold (pest control)"], specialNotes: "Requires staking and regular pruning for best results." },
    { id: "peas", name: "Peas", icon: "üåø", soil: ["Loamy", "Clayey"], water: "low", seasons: ["Rabi"], growingDuration: 3, investment: 15000, avgYield: 40, marketPrice: "‚Çπ2500/quintal", type: "Vegetable", varieties: ["Punjab 89", "Matar Ageta-7"], marketDemand: "High", riskFactor: "Low", cropFamily: "Fabaceae", waterEfficiency: "High", commonRisks: ["Powdery Mildew", "Rust"], plantingMonths: [10, 11], harvestMonths: [1, 2], soilPH: [6.0, 7.5], interCropping: [], specialNotes: "Good for nitrogen fixation. Early sowing fetches better market prices." },
    { id: "cauliflower", name: "Cauliflower", icon: "ü•¶", soil: ["Loamy", "Sandy"], water: "medium", seasons: ["Rabi"], growingDuration: 3, investment: 25000, avgYield: 80, marketPrice: "‚Çπ1500/quintal", type: "Vegetable", varieties: ["Pusa Snowball K-1"], marketDemand: "High", riskFactor: "Medium", cropFamily: "Brassicaceae", waterEfficiency: "Medium", commonRisks: ["Black Rot", "Diamondback Moth"], plantingMonths: [8, 9, 10], harvestMonths: [11, 12, 1], soilPH: [6.0, 7.0], interCropping: ["Onion", "Spinach"], specialNotes: "Sensitive to temperature fluctuations during head formation." },
    { id: "carrot", name: "Carrot", icon: "ü•ï", soil: ["Sandy", "Loamy"], water: "low", seasons: ["Rabi"], growingDuration: 3, investment: 20000, avgYield: 100, marketPrice: "‚Çπ1200/quintal", type: "Vegetable", varieties: ["Pusa Kesar", "Punjab Black Beauty"], marketDemand: "High", riskFactor: "Low", cropFamily: "Apiaceae", waterEfficiency: "High", commonRisks: ["Carrot Rust Fly", "Leaf Blight"], plantingMonths: [9, 10], harvestMonths: [12, 1], soilPH: [6.0, 7.0], interCropping: ["Lettuce", "Radish"], specialNotes: "Requires deep, loose soil for good root development." },
    { id: "okra", name: "Okra (Bhindi)", icon: "ü•¨", soil: ["Sandy", "Loamy"], water: "medium", seasons: ["Kharif", "Zaid"], growingDuration: 2, investment: 18000, avgYield: 40, marketPrice: "‚Çπ2000/quintal", type: "Vegetable", varieties: ["Punjab Padmini", "P-8"], marketDemand: "High", riskFactor: "Medium", cropFamily: "Malvaceae", waterEfficiency: "Medium", commonRisks: ["Yellow Vein Mosaic Virus", "Fruit Borer"], plantingMonths: [3, 6], harvestMonths: [5, 8], soilPH: [6.0, 7.5], interCropping: ["Onion"], specialNotes: "Regular picking encourages more fruit production." },

    // Spices & Medicinal
    { id: "garlic", name: "Garlic", icon: "üßÑ", soil: ["Loamy", "Alluvial"], water: "medium", seasons: ["Rabi"], growingDuration: 5, investment: 45000, avgYield: 50, marketPrice: "‚Çπ5000/quintal", type: "Spice", varieties: ["PG-17", "Yamuna Safed"], marketDemand: "High", riskFactor: "Medium", cropFamily: "Amaryllidaceae", waterEfficiency: "Medium", commonRisks: ["Thrips", "Stemphylium Blight"], plantingMonths: [9, 10], harvestMonths: [3, 4], soilPH: [6.0, 7.0], interCropping: ["Potato"], specialNotes: "High-value spice crop with good storage life." },
    { id: "turmeric", name: "Turmeric", icon: "üåø", soil: ["Loamy", "Clayey"], water: "medium", seasons: ["Kharif"], growingDuration: 8, investment: 40000, avgYield: 70, marketPrice: "‚Çπ6500/quintal", type: "Spice", varieties: ["Rajendra Sonia", "Punjab Haldi 1"], marketDemand: "High", riskFactor: "Low", cropFamily: "Zingiberaceae", waterEfficiency: "Medium", commonRisks: ["Rhizome Rot", "Leaf Blotch"], plantingMonths: [4, 5], harvestMonths: [1, 2], soilPH: [5.5, 7.5], interCropping: ["Maize", "Chilli"], specialNotes: "Long duration crop, requires well-drained soil to prevent rot." },
    { id: "coriander", name: "Coriander", icon: "üåø", soil: ["Loamy"], water: "low", seasons: ["Rabi"], growingDuration: 3, investment: 10000, avgYield: 6, marketPrice: "‚Çπ7000/quintal", type: "Spice", varieties: ["Punjab Sugandh", "GC-2"], marketDemand: "High", riskFactor: "Low", cropFamily: "Apiaceae", waterEfficiency: "High", commonRisks: ["Powdery Mildew", "Aphids"], plantingMonths: [10, 11], harvestMonths: [1, 2], soilPH: [6.0, 8.0], interCropping: ["Sugarcane", "Lentil"], specialNotes: "Can be grown for both leaves (cilantro) and seeds." },
    { id: "aloe_vera", name: "Aloe Vera", icon: "üåµ", soil: ["Sandy", "Loamy"], water: "low", seasons: ["Perennial"], growingDuration: 18, investment: 30000, avgYield: 200, marketPrice: "‚Çπ500/quintal", type: "Medicinal", varieties: ["IC111271"], marketDemand: "Medium", riskFactor: "Low", cropFamily: "Asphodelaceae", waterEfficiency: "Very High", commonRisks: ["Mealybugs", "Root Rot"], plantingMonths: [7, 8], harvestMonths: [1,2,3,4,5,6,7,8,9,10,11,12], soilPH: [6.5, 8.5], interCropping: [], specialNotes: "Extremely low maintenance and drought-resistant; thrives on marginal lands." },
    
    // Fruits & Flowers
    { id: "kinnow", name: "Kinnow", icon: "üçä", soil: ["Loamy", "Alluvial"], water: "medium", seasons: ["Perennial"], growingDuration: 36, investment: 80000, avgYield: 100, marketPrice: "‚Çπ2000/quintal", type: "Fruit", varieties: ["Kinnow"], marketDemand: "High", riskFactor: "Medium", cropFamily: "Rutaceae", waterEfficiency: "Medium", commonRisks: ["Citrus Canker", "Psylla"], plantingMonths: [9, 2], harvestMonths: [12, 1, 2], soilPH: [6.0, 7.5], interCropping: ["Legumes (in early years)"], specialNotes: "Long-term investment. Takes 3-4 years to start bearing fruit." },
    { id: "guava", name: "Guava", icon: "üçà", soil: ["Alluvial", "Loamy"], water: "low", seasons: ["Perennial"], growingDuration: 24, investment: 40000, avgYield: 60, marketPrice: "‚Çπ2500/quintal", type: "Fruit", varieties: ["Sardar", "Allahabad Safeda"], marketDemand: "Medium", riskFactor: "Low", cropFamily: "Myrtaceae", waterEfficiency: "High", commonRisks: ["Wilt", "Fruit Fly"], plantingMonths: [8, 9], harvestMonths: [11, 12, 1], soilPH: [6.0, 8.0], interCropping: ["Vegetables (in early years)"], specialNotes: "Hardy fruit tree, tolerant to drought and a wide range of soils." },
    { id: "marigold", name: "Marigold", icon: "üåº", soil: ["Sandy", "Loamy"], water: "medium", seasons: ["Annual"], growingDuration: 2, investment: 15000, avgYield: 50, marketPrice: "‚Çπ3000/quintal", type: "Flower", varieties: ["Pusa Narangi Gainda", "Pusa Basanti Gainda"], marketDemand: "High", riskFactor: "Low", cropFamily: "Asteraceae", waterEfficiency: "Medium", commonRisks: ["Powdery Mildew", "Thrips"], plantingMonths: [2, 8], harvestMonths: [4, 10], soilPH: [6.0, 7.5], interCropping: ["Tomato (pest control)"], specialNotes: "High demand during festival seasons. Acts as a natural pest repellent." },
    
    // Fodder
    { id: "berseem", name: "Berseem", icon: "‚òòÔ∏è", soil: ["Clayey", "Loamy"], water: "high", seasons: ["Rabi"], growingDuration: 6, investment: 12000, avgYield: 400, marketPrice: "‚Çπ250/quintal", type: "Fodder", varieties: ["BL 42", "BL 10"], marketDemand: "Medium", riskFactor: "Low", cropFamily: "Fabaceae", waterEfficiency: "Medium", commonRisks: ["Stem Rot", "Aphids"], plantingMonths: [9, 10], harvestMonths: [11, 12, 1, 2, 3, 4], soilPH: [6.5, 8.0], interCropping: ["Mustard"], specialNotes: "King of fodder crops. Provides multiple cuttings throughout the winter." },
    { id: "lucerne", name: "Lucerne (Alfalfa)", icon: "üçÄ", soil: ["Loamy", "Sandy"], water: "medium", seasons: ["Perennial"], growingDuration: 36, investment: 20000, avgYield: 350, marketPrice: "‚Çπ300/quintal", type: "Fodder", varieties: ["Sirsa-9", "LLC-3"], marketDemand: "Medium", riskFactor: "Low", cropFamily: "Fabaceae", waterEfficiency: "High", commonRisks: ["Downy Mildew", "Aphids"], plantingMonths: [10], harvestMonths: [1,2,3,4,5,6,7,8,9,10,11,12], soilPH: [6.5, 8.0], interCropping: [], specialNotes: "Perennial fodder crop that provides nutritious green fodder for several years." }
];
const DISTRICT_CROP_SUITABILITY = {
    "Amritsar": ["wheat", "paddy", "maize", "potato", "basmati_rice", "onion", "peas", "berseem", "garlic", "cauliflower", "carrot", "marigold"],
    "Barnala": ["wheat", "paddy", "cotton", "mustard", "potato", "gram", "barley", "lucerne"],
    "Bathinda": ["wheat", "cotton", "maize", "mustard", "gram", "sunflower", "pearl_millet", "barley", "kinnow"],
    "Faridkot": ["wheat", "cotton", "paddy", "sugarcane", "potato", "mustard", "peas"],
    "Fatehgarh Sahib": ["wheat", "paddy", "maize", "potato", "onion", "guava", "tomato", "sunflower"],
    "Fazilka": ["wheat", "cotton", "mustard", "gram", "sunflower", "kinnow", "barley", "guava"],
    "Ferozepur": ["wheat", "cotton", "paddy", "sugarcane", "mustard", "kinnow", "basmati_rice"],
    "Gurdaspur": ["wheat", "paddy", "maize", "potato", "sugarcane", "guava", "basmati_rice", "turmeric", "lentil"],
    "Hoshiarpur": ["wheat", "maize", "potato", "sugarcane", "kinnow", "guava", "tomato", "turmeric", "mango", "aloe_vera"],
    "Jalandhar": ["wheat", "paddy", "potato", "maize", "sugarcane", "onion", "peas", "garlic", "cauliflower", "marigold"],
    "Kapurthala": ["wheat", "paddy", "sugarcane", "potato", "maize", "sunflower", "peas"],
    "Ludhiana": ["wheat", "paddy", "maize", "potato", "onion", "sunflower", "tomato", "berseem", "garlic", "cauliflower", "marigold"],
    "Mansa": ["wheat", "cotton", "mustard", "gram", "pearl_millet", "barley"],
    "Moga": ["wheat", "paddy", "potato", "mustard", "gram", "cotton", "lucerne"],
    "Sri Muktsar Sahib": ["wheat", "cotton", "paddy", "mustard", "gram", "kinnow", "guava"],
    "Pathankot": ["wheat", "maize", "potato", "guava", "basmati_rice", "tomato", "turmeric", "mango"],
    "Patiala": ["wheat", "paddy", "maize", "potato", "mustard", "sugarcane", "guava", "berseem", "lentil"],
    "Rupnagar": ["wheat", "maize", "potato", "sugarcane", "guava", "tomato", "lentil"],
    "Sahibzada Ajit Singh Nagar": ["wheat", "maize", "potato", "onion", "sunflower", "tomato", "marigold"],
    "Sangrur": ["wheat", "paddy", "cotton", "potato", "mustard", "sugarcane", "gram", "barley", "berseem", "lucerne", "okra"],
    "Shahid Bhagat Singh Nagar": ["wheat", "paddy", "sugarcane", "maize", "potato", "sunflower"],
    "Tarn Taran": ["wheat", "paddy", "potato", "basmati_rice", "onion", "berseem", "peas"]
};

// --- HELPER & UI COMPONENTS ---
const getCurrentSeason = () => { const month = new Date().getMonth() + 1; if (month >= 6 && month <= 10) return "Kharif"; if (month >= 11 || month <= 4) return "Rabi"; return "Zaid"; };
const getSeasonalWeatherPrediction = (months) => { const patterns = { 1:{t:"12-22",r:"L",h:"65-75"}, 2:{t:"15-25",r:"L",h:"60-70"}, 3:{t:"18-28",r:"L",h:"55-65"}, 4:{t:"22-35",r:"L",h:"45-55"}, 5:{t:"28-40",r:"L",h:"40-50"}, 6:{t:"28-38",r:"M",h:"60-70"}, 7:{t:"26-34",r:"H",h:"75-85"}, 8:{t:"26-33",r:"H",h:"80-90"}, 9:{t:"25-33",r:"M",h:"70-80"}, 10:{t:"20-30",r:"L",h:"60-70"}, 11:{t:"15-28",r:"VL",h:"55-65"}, 12:{t:"10-20",r:"VL",h:"65-75"} }; const names = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]; if (!months || months.length === 0) return { avg: "N/A", details: [] }; let aT=0, aH=0; const d = months.map(m => { const p=patterns[m]; aT+=parseInt(p.t.split('-')[1]); aH+=parseInt(p.h.split('-')[1]); return { month: names[m-1], temp: p.t+"¬∞C", rainfall: p.r, humidity: p.h+"%" }; }); return { avg: `~${Math.round(aT/months.length)}¬∞C | ${Math.round(aH/months.length)}% Hum`, details: d }; };
const FilterSelect = ({ name, label, value, onChange, options, placeholder }) => (<div><label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-1">{label}</label><select id={name} name={name} value={value} onChange={onChange} className="w-full bg-white border border-gray-300 rounded-md shadow-sm py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500"><option value="">{placeholder}</option>{options.map(option => (<option key={option.value || option} value={option.value || option}>{option.label || option}</option>))}</select></div>);
const WaterSourceCheckboxes = ({ selected, onChange }) => { const sources = ["Rainwater", "Borewell/Tubewell", "Canal Irrigation", "Pond/Well"]; return (<div><label className="block text-sm font-medium text-gray-700 mb-2">Available Water Sources</label><div className="grid grid-cols-2 md:grid-cols-2 gap-x-4 gap-y-2">{sources.map(s => (<label key={s} className="flex items-center space-x-2 text-sm text-gray-600"><input type="checkbox" name="waterSources" value={s} checked={selected.includes(s)} onChange={onChange} className="h-4 w-4 rounded border-gray-300 text-green-600 focus:ring-green-500"/><span>{s}</span></label>))}</div></div>); };
const WeatherInfoPanel = ({ weather, error, season }) => (<div className="bg-blue-50 border border-blue-200 rounded-lg p-4 h-full"><h3 className="font-semibold text-blue-800 mb-2">Intelligence Panel</h3><div className="space-y-2"><div className="flex items-center text-sm text-blue-700"><Calendar className="w-4 h-4 mr-2"/> Current Season: <strong className="ml-1">{season}</strong></div><div className="flex items-center text-sm text-blue-700"><Zap className="w-4 h-4 mr-2"/> AI is factoring in current planting windows.</div><div className="pt-2 border-t border-blue-200 mt-2">{weather ? (<><div className="flex items-center text-sm font-semibold text-blue-800"><MapPin className="w-4 h-4 mr-2"/>Live Weather: {weather.name}</div><div className="flex items-center text-sm text-blue-700"><Thermometer className="w-4 h-4 mr-2"/>{Math.round(weather.main.temp)}¬∞C, feels like {Math.round(weather.main.feels_like)}¬∞C</div><div className="flex items-center text-sm text-blue-700"><Droplets className="w-4 h-4 mr-2"/>Humidity: {weather.main.humidity}%</div><div className="flex items-center text-sm text-blue-700"><Wind className="w-4 h-4 mr-2"/>Wind: {weather.wind.speed} m/s</div></>) : (<div className="text-sm text-blue-600">{error || "Select a district for live weather."}</div>)}</div></div></div>);
const AIInsightPanel = ({ filters, resultsCount, season }) => (<div className="bg-green-50 border-2 border-dashed border-green-200 rounded-lg p-5 mb-8 text-center"><p className="text-green-800">Based on your selections for a farm in <strong className="font-semibold">{filters.district}</strong> with <strong className="font-semibold">{filters.soilType.toLowerCase()} soil</strong> and a <strong className="font-semibold">{filters.investmentBudget > 50000 ? 'high' : 'medium'} budget</strong>, our AI has identified <strong className="font-semibold">{resultsCount} suitable crops</strong> for the current <strong className="font-semibold">{season} season</strong>. The recommendations below are ranked by a Smart Score, balancing profitability with risk and sustainability.</p></div>);
const CropDetailModal = ({ crop, onClose }) => (<div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4" onClick={onClose}><div className="bg-white rounded-lg shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto" onClick={e => e.stopPropagation()}><div className="sticky top-0 bg-white p-5 border-b flex justify-between items-center"><div className="flex items-center gap-3"><span className="text-4xl">{crop.icon}</span><div><h2 className="text-2xl font-bold">{crop.name}</h2><p className="text-sm text-gray-500">{crop.type} ({crop.cropFamily})</p></div></div><button onClick={onClose} className="text-gray-500 hover:text-gray-800"><X size={24}/></button></div><div className="p-6"><div className="space-y-6"><div><h3 className="text-lg font-semibold text-gray-800 mb-2 flex items-center gap-2"><Calendar/> Farming Timeline</h3><ul className="space-y-2 text-sm"><li><strong>Planting:</strong> {crop.plantingMonths.map(m => new Date(0, m - 1).toLocaleString('default', { month: 'long' })).join(', ')}</li><li><strong>Growing:</strong> Approx. {crop.growingDuration} months</li><li><strong>Harvesting:</strong> {crop.harvestMonths.map(m => new Date(0, m - 1).toLocaleString('default', { month: 'long' })).join(', ')}</li></ul></div><div><h3 className="text-lg font-semibold text-gray-800 mb-2 flex items-center gap-2"><Sun/> Seasonal Weather Forecast</h3><div className="text-sm space-y-2"><div><strong>Planting Period:</strong><div className="grid grid-cols-4 gap-2 mt-1">{crop.plantingWeather.details.map(d => <div key={d.month} className="bg-gray-100 p-2 rounded text-center"><div className="font-bold">{d.month}</div><div>{d.temp}</div><div className="text-xs">{d.rainfall} Rain</div></div>)}</div></div><div><strong>Harvesting Period:</strong><div className="grid grid-cols-4 gap-2 mt-1">{crop.harvestWeather.details.map(d => <div key={d.month} className="bg-gray-100 p-2 rounded text-center"><div className="font-bold">{d.month}</div><div>{d.temp}</div><div className="text-xs">{d.rainfall} Rain</div></div>)}</div></div></div></div><div><h3 className="text-lg font-semibold text-gray-800 mb-2 flex items-center gap-2"><Bug/> Pest & Risk Management</h3><p className="text-sm text-gray-600 mb-2"><strong>Common Risks:</strong> {crop.commonRisks.join(', ')}</p><p className="text-sm text-gray-600">Regularly monitor for these issues. Employ Integrated Pest Management (IPM) practices, such as using beneficial insects and bio-pesticides, before resorting to chemical sprays.</p></div><div><h3 className="text-lg font-semibold text-gray-800 mb-2 flex items-center gap-2"><Sprout/> Inter-cropping & Soil Health</h3><p className="text-sm text-gray-600 mb-2"><strong>Compatible Partners:</strong> {crop.interCropping.length > 0 ? crop.interCropping.join(', ') : "Generally grown as a monocrop."}</p><p className="text-sm text-gray-600">{crop.specialNotes}</p></div></div></div></div></div>);
const ProfitBar = ({ investment, profit }) => { const total = investment + profit; const investmentPercent = total > 0 ? (investment / total) * 100 : 0; return (<div><div className="relative w-full bg-gray-200 rounded-full h-2.5"><div className="bg-green-500 h-2.5 rounded-full" style={{ width: `100%` }}></div><div className="absolute top-0 left-0 bg-red-500 h-2.5 rounded-l-full" style={{ width: `${investmentPercent}%` }}></div></div><div className="flex justify-between text-xs mt-1"><span className="font-semibold text-red-600">Invest: ‚Çπ{investment.toLocaleString()}</span><span className="font-semibold text-green-600">Profit: ‚Çπ{profit.toLocaleString()}</span></div></div>); };
const CropRecommendationCard = ({ crop, rank, onViewDetails }) => { const calculateProfit = (c) => { try { const price = parseInt((c.marketPrice || "0").replace(/[^0-9]/g, ''), 10); return (c.avgYield * price) - c.investment; } catch { return 0; } }; const profit = calculateProfit(crop); const demandColor = crop.marketDemand === 'High' ? 'text-green-600 bg-green-100' : 'text-yellow-600 bg-yellow-100'; const riskColor = crop.riskFactor === 'High' ? 'text-red-600 bg-red-100' : crop.riskFactor === 'Medium' ? 'text-yellow-600 bg-yellow-100' : 'text-green-600 bg-green-100'; const waterColor = crop.waterEfficiency.includes('High') ? 'text-blue-600 bg-blue-100' : 'text-orange-600 bg-orange-100'; return (<div className="bg-white border border-gray-200 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 flex flex-col"><div className="p-5 flex-grow"><div className="flex items-center gap-4 mb-3"><span className="text-5xl">{crop.icon}</span><div><h3 className="text-2xl font-bold text-gray-800">{crop.name}</h3><p className="text-sm text-gray-500">{crop.type}</p></div></div><div className="flex flex-wrap gap-2 mb-4"><div className={`flex items-center text-xs font-semibold px-2 py-1 rounded-full ${demandColor}`}><TrendingUp size={14} className="mr-1"/>Market: {crop.marketDemand}</div><div className={`flex items-center text-xs font-semibold px-2 py-1 rounded-full ${riskColor}`}><Shield size={14} className="mr-1"/>Risk: {crop.riskFactor}</div><div className={`flex items-center text-xs font-semibold px-2 py-1 rounded-full ${waterColor}`}><Droplets size={14} className="mr-1"/>Water Use: {crop.waterEfficiency}</div></div><div className="space-y-3 text-sm mb-4"><ProfitBar investment={crop.investment} profit={profit}/></div><div className="bg-gray-50 rounded-md p-3 mb-4"><h4 className="font-semibold text-sm mb-2 text-gray-700">Seasonal Weather Forecast</h4><div className="flex justify-between items-center text-xs text-gray-600 mb-2"><strong>Planting ({crop.plantingWeather.details.map(d=>d.month).join(', ')}):</strong><span>{crop.plantingWeather.avg}</span></div><div className="flex justify-between items-center text-xs text-gray-600"><strong>Harvest ({crop.harvestWeather.details.map(d=>d.month).join(', ')}):</strong><span>{crop.harvestWeather.avg}</span></div></div></div><div className="p-5 pt-0"><button onClick={() => onViewDetails(crop)} className="w-full text-center bg-green-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center gap-2">View Details <Eye size={16}/></button></div>{rank <= 3 && <div className="absolute top-2 right-2 bg-green-600 text-white text-xs px-2.5 py-1 rounded-full font-bold z-10 shadow-lg">TOP #{rank}</div>}</div>); };

// --- MAIN PAGE COMPONENT ---
export default function CropRecommendations() {
    const initialFilters = { district: "", soilType: "", previousCrop: "", waterSources: [], investmentBudget: "", growingDuration: "" };
    const [filters, setFilters] = useState(initialFilters);
    const [weather, setWeather] = useState(null);
    const [weatherError, setWeatherError] = useState("");
    const [recommendations, setRecommendations] = useState([]);
    const [hasSearched, setHasSearched] = useState(false);
    const [selectedCrop, setSelectedCrop] = useState(null);
    const [season] = useState(getCurrentSeason());
    const totalFilters = Object.keys(initialFilters).length;
    const filledFilters = useMemo(() => Object.values(filters).filter(v => (Array.isArray(v) ? v.length > 0 : v !== "")).length, [filters]);
    const isFormComplete = filledFilters === totalFilters;

    useEffect(() => { if (!filters.district) { setWeather(null); setWeatherError(""); return; } const fetchWeather = async () => { try { const apiKey = "5e04c9e9f749a242973926ba146c8772"; const url = `https://api.openweathermap.org/data/2.5/weather?q=${filters.district},IN&units=metric&appid=${apiKey}`; const response = await axios.get(url); setWeather(response.data); setWeatherError(""); } catch (err) { setWeather(null); setWeatherError("Could not fetch live weather data."); } }; fetchWeather(); }, [filters.district]);
    
    const handleFilterChange = (e) => { const { name, value } = e.target; setFilters(prev => ({ ...prev, [name]: value })); };
    const handleWaterSourceChange = (e) => { const { value, checked } = e.target; setFilters(prev => ({ ...prev, waterSources: checked ? [...prev.waterSources, value] : prev.waterSources.filter(s => s !== value) })); };
    
    const handleGetRecommendations = () => {
        let filtered = CROPS.filter(crop => DISTRICT_CROP_SUITABILITY[filters.district]?.includes(crop.id));
        filtered = filtered.filter(crop => crop.seasons.includes(season) || ["Annual", "Perennial"].includes(crop.seasons[0]));
        filtered = filtered.filter(crop => crop.soil.includes(filters.soilType));
        const [minDur, maxDur] = filters.growingDuration.split('-').map(Number);
        filtered = filtered.filter(c => c.growingDuration >= minDur && c.growingDuration <= (maxDur || 999));
        filtered = filtered.filter(c => c.investment <= Number(filters.investmentBudget));
        const waterLevels = new Set(filters.waterSources.map(s => ({ "Rainwater": "low", "Pond/Well": "low", "Borewell/Tubewell": "medium", "Canal Irrigation": "high" }[s])));
        const userHas = { high: waterLevels.has('high'), medium: waterLevels.has('medium'), low: waterLevels.has('low') };
        filtered = filtered.filter(c => (c.water === 'high' && userHas.high) || (c.water === 'medium' && (userHas.high || userHas.medium)) || (c.water === 'low' && (userHas.high || userHas.medium || userHas.low)));
        const previousCropFamily = filters.previousCrop ? CROPS.find(c => c.name === filters.previousCrop)?.cropFamily : null;
        
        const processed = filtered.map(crop => {
            const profit = (crop.avgYield * parseInt(crop.marketPrice.replace(/[^0-9]/g, ''))) - crop.investment;
            const demandScore = crop.marketDemand === 'High' ? 1.2 : crop.marketDemand === 'Medium' ? 1.0 : 0.8;
            const riskScore = crop.riskFactor === 'Low' ? 1.2 : crop.riskFactor === 'Medium' ? 1.0 : 0.8;
            const waterScore = crop.waterEfficiency === 'Very High' ? 1.2 : crop.waterEfficiency === 'High' ? 1.1 : 1.0;
            const rotationScore = (previousCropFamily && crop.cropFamily === previousCropFamily) ? 0.85 : 1.0;
            const smartScore = (profit * 0.4) * (demandScore * 0.2) * (riskScore * 0.2) * (waterScore * 0.1) * (rotationScore * 0.1);
            return { ...crop, plantingWeather: getSeasonalWeatherPrediction(crop.plantingMonths), harvestWeather: getSeasonalWeatherPrediction(crop.harvestMonths), smartScore };
        });

        processed.sort((a, b) => b.smartScore - a.smartScore);
        setRecommendations(processed);
        setHasSearched(true);
    };

    const handleClearFilters = () => { setFilters(initialFilters); setRecommendations([]); setHasSearched(false); setWeather(null); };

    return (
        <div className="bg-gray-50 min-h-screen">
            {selectedCrop && <CropDetailModal crop={selectedCrop} onClose={() => setSelectedCrop(null)} />}
            <div className="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
                <header className="text-center mb-10"><h1 className="text-4xl sm:text-5xl font-extrabold text-gray-800 flex items-center justify-center gap-3"><Leaf className="text-green-600 w-12 h-12"/> Punjab Crop AI Panel</h1><p className="mt-2 text-lg text-gray-600 max-w-2xl mx-auto">Your personal AI farming advisor. Fill all fields below for hyper-personalized crop recommendations.</p></header>
                <main>
                    <div className="bg-white p-6 rounded-2xl shadow-xl border border-gray-200">
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                           <div className="lg:col-span-2 grid grid-cols-1 sm:grid-cols-2 gap-6">
                                <FilterSelect name="district" label="District" value={filters.district} onChange={handleFilterChange} options={DISTRICTS} placeholder="Select District"/>
                                <FilterSelect name="soilType" label="Soil Type" value={filters.soilType} onChange={handleFilterChange} options={SOIL_TYPES} placeholder="Select Soil Type"/>
                                <FilterSelect name="previousCrop" label="Previous Crop" value={filters.previousCrop} onChange={handleFilterChange} options={CROPS.map(c => c.name)} placeholder="None / Fallow Land"/>
                                <FilterSelect name="growingDuration" label="Preferred Growing Duration" value={filters.growingDuration} onChange={handleFilterChange} options={[{label: "Short (1-3 months)", value: "1-3"}, {label: "Medium (4-6 months)", value: "4-6"}, {label: "Long (6+ months)", value: "7-99"}]} placeholder="Select Duration"/>
                                <div className="sm:col-span-2"><FilterSelect name="investmentBudget" label="Investment Budget (per acre)" value={filters.investmentBudget} onChange={handleFilterChange} options={[{label: "Low (Upto ‚Çπ20,000)", value: 20000}, {label: "Medium (Upto ‚Çπ40,000)", value: 40000}, {label: "High (Upto ‚Çπ60,000)", value: 60000}, {label: "Very High (Above ‚Çπ60,000)", value: 200000}]} placeholder="Select Budget Range"/></div>
                                <div className="sm:col-span-2"><WaterSourceCheckboxes selected={filters.waterSources} onChange={handleWaterSourceChange}/></div>
                           </div>
                           <div className="md:col-span-2 lg:col-span-1"><WeatherInfoPanel weather={weather} error={weatherError} season={season}/></div>
                        </div>
                        <div className="mt-6 pt-6 border-t border-gray-200">
                            <div className="flex flex-col md:flex-row gap-4 items-center">
                                <div className="w-full md:w-1/2">
                                    <p className="text-sm font-medium text-gray-700 mb-1">Recommendation Progress</p>
                                    <div className="w-full bg-gray-200 rounded-full h-2.5"><div className="bg-green-600 h-2.5 rounded-full" style={{ width: `${(filledFilters/totalFilters)*100}%` }}></div></div>
                                    <p className="text-xs text-gray-500 mt-1">{isFormComplete ? 'Ready to generate!' : `${filledFilters} of ${totalFilters} options selected.`}</p>
                                </div>
                                <div className="flex-grow flex items-center gap-3 w-full md:w-auto">
                                    <button onClick={handleGetRecommendations} disabled={!isFormComplete} className="w-full text-white font-bold py-3 px-6 rounded-lg shadow-md transition-all duration-300 disabled:bg-gray-400 disabled:cursor-not-allowed bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-4 focus:ring-green-300 flex items-center justify-center gap-2"><ChevronsRight size={20}/> Get AI Recommendations</button>
                                    <button onClick={handleClearFilters} className="p-3 text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"><RefreshCcw size={20}/></button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="mt-12">
                        {hasSearched && <AIInsightPanel filters={filters} resultsCount={recommendations.length} season={season} />}
                        <div className="flex items-center gap-3 mb-6"><BarChart className="w-8 h-8 text-green-600"/><h2 className="text-3xl font-bold text-gray-800">AI-Generated Results</h2></div>
                        {!hasSearched ? (<div className="text-center py-16 px-6 bg-white rounded-lg shadow-md border-2 border-dashed"><Info className="w-12 h-12 mx-auto text-gray-400"/><h3 className="mt-4 text-xl font-semibold text-gray-700">Your Recommendations Await</h3><p className="mt-2 text-gray-500">Complete the panel above to see your tailored results.</p></div>)
                        : recommendations.length > 0 ? (<div className="grid grid-cols-1 lg:grid-cols-2 gap-6">{recommendations.map((crop, index) => <CropRecommendationCard key={crop.id} crop={crop} rank={index + 1} onViewDetails={setSelectedCrop} />)}</div>)
                        : (<div className="text-center py-16 px-6 bg-white rounded-lg shadow-md border-2 border-dashed"><Info className="w-12 h-12 mx-auto text-yellow-500"/><h3 className="mt-4 text-xl font-semibold text-gray-700">No Suitable Crops Found</h3><p className="mt-2 text-gray-500">Based on your specific criteria, no ideal crops were found. Try adjusting your filters for a broader search.</p></div>)}
                    </div>
                </main>
            </div>
        </div>
    );
}

